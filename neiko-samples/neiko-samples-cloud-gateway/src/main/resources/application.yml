server:
  port: 8888

test: /hello/**

spring:
  application:
    name: hello-gateway
  cloud:
    discovery:
      client:
        simple:
          instances:
            discovery-provider:
              - uri: http://localhost:8082
    gateway:
      discovery:
        locator: #开启了之后会给发现的服务注册路由 路由uri为 lb://service-name
          enabled: true #开启注入 DiscoveryClientRouteDefinitionLocator
          route-id-prefix: Schilings_ #默认为DiscoveryClient注入类的类名_服务名，这里为ReactiveCompositeDiscoveryClient_serviceName
          # 下面配置的断言和过滤器都给每一个服务的路由注册
          # 这块的断言和过滤器的配置一定要 "' '" 包裹着写，是为了spel解析或者正则解析？
          predicates:
            #默认初始化的 即例如这个访问就是 http://localhost:8888/discovery-provider/** 就会访问到discovery-provider
            - name: Path
              args:
                pattern: "'/'+serviceId+'/**'"
            - name: Method
              args:
                methods: "'GET'"
            - Host="'**.foo.com'"
          filters:
            #默认初始化的，即例如这个访问就是 /discovery-provider/** 就会变成 /**
            - name: RewritePath
              args:
                regexp: "'/' + serviceId + '/(?<remaining>.*)'"
                replacement: "'/${remaining}'"

      routes:
        - id: path_route
          # 匹配成功后，会被转发到8082端口，至于端口后面的path，会直接使用原始请求的
          # 例如http://127.0.0.1:8081/hello/str，会被转发到http://127.0.0.1:8082/hello/str
          uri: lb://discovery-provider # http://127.0.0.1:8082
          # 根据请求路径中带有"/hello/"，就算匹配成功
          predicates:
            - Path=/loadbalancer/**
            # 1.等价
            #- Cookie=mycookie,mycookievalue
            # 2.等价
            #- name: Cookie
            #  args: 
            #    name: mycookie
            #    regexp: mycookievalue